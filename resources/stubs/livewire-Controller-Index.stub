<?php

namespace App\Http\Livewire\{{Model}};

use App\Models\{{Model}};
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;
use Livewire\Component;
use Livewire\WithPagination;

class {{Model}}Index extends Component
{
    use WithPagination;

    protected $paginationTheme = 'bootstrap';

    public $perPage = 25;
    public $search = '';
    public $orderBy = 'id';
    public $orderWay = 'desc';
    public $showColumn;

    public $all;
    public $fromDate = null;
    public $toDate = null;
    public $byDate = 'created_at';

    public $selected{{Models}} = [];

    public {{Model}} ${{model}};
    private ${{models}};
    public $user;

    {{livewireRelationship}}

    {{filter_public}}


    public $admin_view_status = '', $by, $url;
    public function mount($admin_view_status = '')
    {
        $this->url = Route::current()->getName();
        $this->admin_view_status = $admin_view_status;
        $this->user = Auth::user();
        $this->by = session()->get('admin_user', $this->user);

        $this->{{model}} = new {{Model}}();

        $this->all = true;
        // $this->fromDate = date('Y-m-d', strtotime("-5 days"));
        $this->toDate = date('Y-m-d');


        {{livewireRelationshipMount}}

        $this->showColumn = collect([
            'id' => true,
            'slug' => false,

            {{livewireShowColumn}}
            
            // 'status' => false,
            'date' => true,
            'time' => true,
        ]);
    }

    public $slug;
    public ${{model}}_id {{livewirePublic}};
    public $updateMode = false;

    private function resetInputFields() 
    {
        $this->slug = '';
        {{livewireResetInputFields}}
    }


    public function rules()
    {
        return [
            // 'patient_id' => "required|unique:patient_studies,patient_id,$this->patientstudy_id,id,study_id,$this->study_id,deleted_at,NULL",
            // 'slug' => $this-slug,
            
            {{livewireValidatedDate}}
        ];
    }

    public function updated($propertyName)
    {
        $this->validateOnly($propertyName);
    }

    public function store()
    {
        $validatedData = $this->validate();

        {{Model}}::create([
            'add_by' => $this->by->id,
            'slug' => $this->slug,
            {{livewireCreate}}
        ]);

        session()->flash('message', '{{Model}} Created Successfully.');

        $this->resetInputFields();

        $this->emit('close-model'); // Close model to using to jquery
    }

    public function edit($id)
    {
        $this->updateMode = true;
        ${{model}} = {{Model}}::find($id);
        $this->{{model}} = ${{model}};
        $this->{{model}}_id = $id;
        $this->slug = ${{model}}->slug;

        {{livewireEdit}}
    }

    public function cancel() {
        $this->updateMode = false;
        $this->resetInputFields();
    }

    public function update() {

        if ($this->{{model}}_id) {
            ${{model}} = {{Model}}::find($this->{{model}}_id);
            ${{model}}->update([
                'slug' => $this->slug,
                {{livewireUpdate}}
            ]);

            $this->updateMode = false;
            session()->flash('message', '{{Model}} Updated Successfully.');
            $this->resetInputFields();
        }

        $this->emit('close-model'); // Close model to using to jquery
    }

    public function delete($id) {
        if ($id) {
            ${{model}} = {{Model}}::find($id);

            ${{model}}->delete();

            session()->flash('message', '{{Model}} Deleted Successfully.');
        }
    }

    public function restore($id)
    {
        if ($id) {
            ${{model}} = {{Model}}::withTrashed()->find($id);

            ${{model}}->restore();

            session()->flash('message', '{{Model}} Recovered Successfully.');
        }
    }

    public function updatedFromDate($fromDate)
    {
        $this->all = false;
    }

    public function updatedToDate($toDate)
    {
        $this->all = false;
    }

    public function clearFilter()
    {
        $this->all = true;
        // $this->fromDate = date('Y-m-d', strtotime("-5 days"));
        $this->byDate = 'created_at';
        $this->fromDate = '';
        $this->toDate = date('Y-m-d');

        {{filter_clear}}
    }

    {{filter_select}}


    public function gotoPage($page)
    {
        $this->setPage($page);
        $this->emit('gotoTop');
    }

    public function nextPage()
    {
        $this->setPage($this->page + 1);
        $this->emit('gotoTop');
    }

    public function previousPage()
    {
        $this->setPage(max($this->page - 1, 1));
        $this->emit('gotoTop');
    }

    public function render() {
        ${{models}} = {{Model}}::livewireSearch($this->search);

        if ($this->all == false)
            ${{models}} = ${{models}}->whereBetween($this->byDate, [$this->fromDate . ' 00:00:00', $this->toDate . ' 23:59:59']);


        {{filter_where_in}}

        if ($this->admin_view_status == 'deleted') 
            ${{models}} = ${{models}}->onlyTrashed();
        

        ${{models}} = ${{models}}->orderBy($this->orderBy, $this->orderWay)
                ->paginate($this->perPage);

        return view('livewire.{{model}}.{{model}}-index', compact('{{models}}'));
    }
}
